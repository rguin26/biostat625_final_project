race,
vital_status,
iss_stage,
site_of_resection_or_biopsy,
tissue_or_organ_of_origin))
data_subset_nn_nonfactored_vars_mat <- as.matrix(data_subset_nn_nonfactored_vars)
data_subset_nn_factored_vars_mat <- as.matrix(data_subset_nn_factored_vars)
library(fastDummies)
results <- fastDummies::dummy_cols(data_subset_nn_factored_vars)
results <- subset(results, select = -c(1:length(names(data_subset_nn_factored_vars))))
data_subset_nn <- cbind(data_subset_nn_nonfactored_vars_mat, results)
data_subset_nn
View(data_subset_nn)
data_subset_nn <- as.data.frame(data_subset_nn)
View(data_subset_nn)
lapply(data_subset_nn, normalize)
data_subset_nn <- as.numeric(data_subset_nn)
data_subset_nn <- cbind(data_subset_nn_nonfactored_vars_mat, results)
data_subset_nn <- as.numeric(data_subset_nn)
data_subset_nn <- cbind(data_subset_nn_nonfactored_vars_mat, results)
data_subset_nn <- as.data.frame(data_subset_nn)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data_subset_nn_nonfactored_vars_mat_normalized <- lapply(data_subset_nn_nonfactored_vars_mat,
normalize)
View(data_subset_nn_nonfactored_vars_mat_normalized)
data_subset_nn_nonfactored_vars_mat_scaled <- scale(data_subset_nn_nonfactored_vars_mat)
View(data_subset_nn_scaled)
data <- read.delim(file = 'clinical_bone.tsv', sep = '\t', header = TRUE)
data[data == "\'--"] <- "NULL"
is.na(data) <- data == "NULL"
data <- data[, colSums(is.na(data)) < nrow(data)]
#names(data)
data <- subset(data, select = -c(case_id, case_submitter_id))
data <- transform(
data,
project_id=as.factor(project_id),
age_at_index=as.numeric(age_at_index),
age_is_obfuscated=as.factor(age_is_obfuscated),
cause_of_death=as.factor(cause_of_death),
days_to_birth=as.numeric(days_to_birth),
days_to_death=as.numeric(days_to_death),
ethnicity=as.factor(ethnicity),
gender=as.factor(gender),
race=as.factor(race),
vital_status=as.factor(vital_status),
year_of_birth=as.numeric(year_of_birth),
year_of_death=as.numeric(year_of_death),
age_at_diagnosis=as.numeric(age_at_diagnosis),
ann_arbor_b_symptoms=as.factor(ann_arbor_b_symptoms),
ann_arbor_extranodal_involvement=as.factor(ann_arbor_extranodal_involvement),
ann_arbor_pathologic_stage=as.factor(ann_arbor_pathologic_stage),
burkitt_lymphoma_clinical_variant=as.factor(burkitt_lymphoma_clinical_variant),
classification_of_tumor=as.factor(classification_of_tumor),
days_to_diagnosis=as.numeric(days_to_diagnosis),
days_to_last_follow_up=as.numeric(days_to_last_follow_up),
days_to_last_known_disease_status=as.numeric(days_to_last_known_disease_status),
inss_stage=as.numeric(inss_stage),
iss_stage=as.factor(iss_stage),
last_known_disease_status=as.factor(last_known_disease_status),
method_of_diagnosis=as.factor(method_of_diagnosis),
morphology=as.factor(morphology),
primary_diagnosis=as.factor(primary_diagnosis),
prior_malignancy=as.factor(prior_malignancy),
prior_treatment=as.factor(prior_treatment),
progression_or_recurrence=as.factor(progression_or_recurrence),
site_of_resection_or_biopsy=as.factor(site_of_resection_or_biopsy),
synchronous_malignancy=as.factor(synchronous_malignancy),
tissue_or_organ_of_origin=as.factor(tissue_or_organ_of_origin),
tumor_grade=as.factor(tumor_grade),
year_of_diagnosis=as.numeric(year_of_diagnosis),
days_to_treatment_end=as.numeric(days_to_treatment_end),
days_to_treatment_start=as.numeric(days_to_treatment_start),
initial_disease_status=as.factor(initial_disease_status),
number_of_cycles = as.factor(number_of_cycles),
regimen_or_line_of_therapy = as.factor(regimen_or_line_of_therapy),
therapeutic_agents=as.factor(therapeutic_agents),
treatment_anatomic_site=as.factor(treatment_anatomic_site),
treatment_dose=as.factor(treatment_dose),
treatment_intent_type=as.factor(treatment_intent_type),
treatment_or_therapy=as.factor(treatment_or_therapy),
treatment_outcome=as.factor(treatment_outcome),
treatment_type=as.factor(treatment_type)
)
data[data=="not reported"] <- NA
data[data=="Not Reported"] <- NA
data[data=="unknown"] <- NA
data[data=="Unknown"] <- NA
data[data=="not allowed to collect"] <- NA
#summary(data)
rem <- colSums(is.na(data)) > 1000
data <- subset(data, select = -c(age_is_obfuscated, cause_of_death, days_to_death, year_of_birth, year_of_death, ann_arbor_b_symptoms, ann_arbor_extranodal_involvement, ann_arbor_pathologic_stage, burkitt_lymphoma_clinical_variant, classification_of_tumor, days_to_diagnosis, inss_stage, last_known_disease_status, method_of_diagnosis, prior_malignancy, prior_treatment, progression_or_recurrence, synchronous_malignancy, tumor_grade, year_of_diagnosis, days_to_treatment_end, days_to_treatment_start, initial_disease_status, number_of_cycles, regimen_or_line_of_therapy, therapeutic_agents, treatment_anatomic_site, treatment_dose, treatment_intent_type, treatment_or_therapy, treatment_outcome, treatment_type))
#summary(data)
data2 <- data[!is.na(data$vital_status), ]
library(mice)
data_imp <- mice(data2, m=5, method = "sample", printFlag = FALSE)
data_subset_nn <- complete(data_imp)
#summary(data_subset_nn)
data_subset_nn <- subset(data_subset_nn, select = -c(morphology, primary_diagnosis))
names(data_subset_nn)
names(data_subset_nn)
# project_id=as.factor(project_id)                                                <== "factored variable"
# age_at_index=as.numeric(age_at_index)
# days_to_birth=as.numeric(days_to_birth)
# ethnicity=as.factor(ethnicity)                                                  <== "factored variable"
# gender=as.factor(gender)                                                        <== "factored variable"
# race=as.factor(race)                                                            <== "factored variable"
# vital_status=as.factor(vital_status)                                            <== "factored variable"
# age_at_diagnosis=as.numeric(age_at_diagnosis)
# days_to_last_follow_up=as.numeric(days_to_last_follow_up)
# days_to_last_known_disease_status=as.numeric(days_to_last_known_disease_status)
# iss_stage=as.factor(iss_stage)                                                  <== "factored variable"
# site_of_resection_or_biopsy=as.factor(site_of_resection_or_biopsy)              <== "factored variable"
# tissue_or_organ_of_origin=as.factor(tissue_or_organ_of_origin)                  <== "factored variable"
unique(data_subset_nn$project_id)
unique(data_subset_nn$ethnicity)
unique(data_subset_nn$gender)
unique(data_subset_nn$race)
unique(data_subset_nn$vital_status)
unique(data_subset_nn$iss_stage)
unique(data_subset_nn$site_of_resection_or_biopsy)
unique(data_subset_nn$tissue_or_organ_of_origin)
# Factored variables in 'data_subset_nn'
data_subset_nn_factored_vars <- subset(data_subset_nn,
select = c(project_id,
ethnicity,
gender,
race,
vital_status,
iss_stage,
site_of_resection_or_biopsy,
tissue_or_organ_of_origin))
data_subset_nn_factored_vars_mat <- as.matrix(data_subset_nn_factored_vars)
# Non-factored variables in 'data_subset_nn'
data_subset_nn_nonfactored_vars <- subset(data_subset_nn,
select = -c(project_id,
ethnicity,
gender,
race,
vital_status,
iss_stage,
site_of_resection_or_biopsy,
tissue_or_organ_of_origin))
data_subset_nn_nonfactored_vars_mat <- as.matrix(data_subset_nn_nonfactored_vars)
data_subset_nn_factored_vars_mat <- as.matrix(data_subset_nn_factored_vars)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# data_subset_nn_nonfactored_vars_mat_normalized <- lapply(data_subset_nn_nonfactored_vars_mat,
#                                                          normalize)
data_subset_nn_nonfactored_vars_mat_scaled <- scale(data_subset_nn_nonfactored_vars_mat)
library(fastDummies)
results <- fastDummies::dummy_cols(data_subset_nn_factored_vars)
results <- subset(results, select = -c(1:length(names(data_subset_nn_factored_vars))))
View(data_subset_nn_nonfactored_vars_mat_scaled)
data_subset_nn_scaled <- cbind(data_subset_nn_nonfactored_vars_mat_scaled, dimmies)
library(fastDummies)
dummies <- fastDummies::dummy_cols(data_subset_nn_factored_vars)
dummies <- subset(dummies, select = -c(1:length(names(data_subset_nn_factored_vars))))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# data_subset_nn_nonfactored_vars_mat_normalized <- lapply(data_subset_nn_nonfactored_vars_mat,
#                                                          normalize)
data_subset_nn_nonfactored_vars_mat_scaled <- scale(data_subset_nn_nonfactored_vars_mat)
data_subset_nn_scaled <- cbind(data_subset_nn_nonfactored_vars_mat_scaled, dummies)
data_subset_nn_scaled <- as.data.frame(data_subset_nn_scaled)
data_subset_nn_scaled <- cbind(data_subset_nn_nonfactored_vars_mat_scaled, dummies)
typeof(data_subset_nn_scaled)
data_subset_nn_scaled <- as.data.frame(data_subset_nn_scaled)
typeof(data_subset_nn_scaled)
dim(data_subset_nn_scaled)
View(data_subset_nn_scaled)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = .7)
library(caTools)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = .7)
library(caret)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = .7)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = 0.7)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = 0.7)
library(caret)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = 0.7)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = 0.7)
sample.split
help(sample.split)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = 0.7)
SplitRatio = 0.7
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = 0.7)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = split)
sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = 0.7)
typeof(data_subset_nn_scaled)
nrow(data_subset_nn_scaled)
data_subset_nn_scaled[1,]
data_subset_nn_scaled[3,]
# library(caret)
# sample <- sample.split(data_subset_nn_scaled$vital_status, SplitRatio = 0.7)
smp_size <- floor(0.7 * nrow(data_subset_nn_scaled))
train_ind <- sample(seq_len(nrow(data_subset_nn_scaled)), size = smp_size)
train_nn <- data_subset_nn_scaled[train_ind,]
test_nn  <- data_subset_nn_scaled[-train_ind,]
View(train_nn)
View(test_nn)
data_subset_nn_scaled <- cbind(data_subset_nn_nonfactored_vars_mat_scaled, dummies)
data_subset_nn_scaled <- subset(data_subset_nn_scaled,
select = -c("vital_status_Dead",
"vital_status_Not Reported",
"vital_status_Unknown"))
dim(data_subset_nn_scaled)
data_subset_nn_scaled <- subset(data_subset_nn_scaled,
select = -c(`vital_status_Dead`,
`vital_status_Not Reported`,
`vital_status_Unknown`))
dim(data_subset_nn_scaled)
smp_size <- floor(0.7 * nrow(data_subset_nn_scaled))
train_ind <- sample(seq_len(nrow(data_subset_nn_scaled)), size = smp_size)
train_nn <- data_subset_nn_scaled[train_ind,]
test_nn  <- data_subset_nn_scaled[-train_ind,]
dim(train_nn)
library(neuralnet)
nn <- neuralnet(vital_status_Alive ~ .,
data=train_nn,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn <- neuralnet(vital_status_Alive ~ .,
data=train_nn,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
names(train_nn)
View(data_subset_nn_scaled)
library(neuralnet)
nn <- neuralnet(vital_status_Alive ~ age_at_index,
data=train_nn,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
View(train_nn)
train_nn_temp <- subset(train_nn, select = -c(1:5))
train_nn_temp$vital_status_Alive
nn <- neuralnet(vital_status_Alive ~ .,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
View(train_nn_temp)
nn <- neuralnet(vital_status_Alive ~ `tissue_or_organ_of_origin_Hematopoietic system, NOS`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn <- neuralnet(vital_status_Alive ~ `project_id_GENIE-JHU`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn <- neuralnet(vital_status_Alive ~ project_id_GENIE-JHU,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn <- neuralnet(vital_status_Alive ~ race_asian,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn$result.matrix
plot(nn)
names(train_temp)
names(train_nn)
names(train_nn)[1:5]
smp_size <- floor(0.7 * nrow(data_subset_nn_scaled))
train_ind <- sample(seq_len(nrow(data_subset_nn_scaled)), size = smp_size)
train_nn <- data_subset_nn_scaled[train_ind,]
test_nn  <- data_subset_nn_scaled[-train_ind,]
train_nn_temp <- subset(train_nn, select = -names(train_nn)[1:5])
train_nn_temp <- subset(train_nn, select = -c(names(train_nn)[1:5]))
View(train_nn)
names(train_nn)[1:5]
train_nn_temp <- subset(train_nn, select = -c(names(train_nn)[1:5]))
train_nn_temp <- subset(train_nn, select = -c(1:5))
View(train_nn_temp)
nn <- neuralnet(vital_status_Alive ~ race_asian + gender_unknown,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn <- neuralnet(vital_status_Alive ~ c(race_asian, gender_unknown),#race_asian + gender_unknown
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn <- neuralnet(vital_status_Alive ~ race_asian + gender_unknown,#race_asian + gender_unknown
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
temp <- "race_asian + gender_unknown"
nn <- neuralnet(vital_status_Alive ~ temp,#race_asian + gender_unknown
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn <- neuralnet(vital_status_Alive ~ `race_asian`,#race_asian + gender_unknown
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn <- neuralnet(vital_status_Alive ~ `race_asian` + `gender_unknown`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
nn$result.matrix
plot(nn)
names(train_nn)[1]
nn <- neuralnet(vital_status_Alive ~ `age_at_index`,#`race_asian` + `gender_unknown`
data=train_nn,#train_nn_temp
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
for (each in names(train_nn_temp)) {
print(each)
}
9 +
3
9+
3
print(
5+6+
7
)
nn <- neuralnet(vital_status_Alive ~ names(train_nn_temp)[1],
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
names(train_nn_temp)[1]
nn <- neuralnet(vital_status_Alive ~ `names(train_nn_temp)[1]`,#`project_id_BEATAML1.0-COHORT` + `race_asian` + `gender_unknown`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.001)
length(names(train_nn_temp))
names(train_nn_temp)[1]
names(train_nn_temp)[1]
names(train_nn_temp)[2]
names(train_nn_temp)[3]
names(train_nn_temp)[4]
names(train_nn_temp)[5]
names(train_nn_temp)[6]
names(train_nn_temp)[7]
names(train_nn_temp)[8]
names(train_nn_temp)[9]
names(train_nn_temp)[10]
names(train_nn_temp)[11]
names(train_nn_temp)[12]
names(train_nn_temp)[13]
names(train_nn_temp)[14]
names(train_nn_temp)[15]
names(train_nn_temp)[16]
names(train_nn_temp)[17]
names(train_nn_temp)[18]
names(train_nn_temp)[19]
names(train_nn_temp)[20]
names(train_nn_temp)[21]
names(train_nn_temp)[22]
names(train_nn_temp)[23]
names(train_nn_temp)[24]
names(train_nn_temp)[25]
names(train_nn_temp)[26]
names(train_nn_temp)[27]
names(train_nn_temp)[28]
names(train_nn_temp)[29]
names(train_nn_temp)[30]
names(train_nn_temp)[31]
names(train_nn_temp)[32]
names(train_nn_temp)[33]
names(train_nn_temp)[34]
names(train_nn_temp)[35]
names(train_nn_temp)[36]
names(train_nn_temp)[37]
names(train_nn_temp)[38]
names(train_nn_temp)[39]
names(train_nn_temp)[40]
names(train_nn_temp)[41]
names(train_nn_temp)[42]
names(train_nn_temp)[43]
names(train_nn_temp)[44]
names(train_nn_temp)[45]
names(train_nn_temp)[46]
names(train_nn_temp)[47]
names(train_nn_temp)[48]
names(train_nn_temp)[49]
names(train_nn_temp)[50]
names(train_nn_temp)[51]
names(train_nn_temp)[52]
names(train_nn_temp)[53]
names(train_nn_temp)[54]
names(train_nn_temp)[55]
names(train_nn_temp)[56]
names(train_nn_temp)[57]
names(train_nn_temp)[58]
names(train_nn_temp)[59]
names(train_nn_temp)[60]
names(train_nn_temp)[61]
names(train_nn_temp)[62]
names(train_nn_temp)[63]
names(train_nn_temp)[64]
names(train_nn_temp)[65]
names(train_nn_temp)[66]
names(train_nn_temp)[67]
names(train_nn_temp)[68]
names(train_nn_temp)[69]
names(train_nn_temp)[70]
names(train_nn_temp)[71]
names(train_nn_temp)[72]
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB` + `project_id_CGCI-BLGSP` + `project_id_GENIE-DFCI` + `project_id_GENIE-JHU` + `project_id_GENIE-MDA` + `project_id_GENIE-MSK` + `project_id_GENIE-UHN` + `project_id_GENIE-VICC` + `project_id_MMRF-COMMPASS` + `project_id_OHSU-CNL` + `project_id_TARGET-ALL-P1` + `project_id_TARGET-ALL-P2` + `project_id_TARGET-ALL-P3` + `project_id_TARGET-AML` + `project_id_TARGET-NBL` + `project_id_TCGA-LAML` + `ethnicity_hispanic or latino` + `ethnicity_not allowed to collect` + `ethnicity_not hispanic or latino` + `ethnicity_not reported` + `ethnicity_Unknown` + `gender_female` + `gender_male` + `gender_not reported` + `gender_unknown` + `race_american indian or alaska native` + `race_asian` + `race_black or african american` + `race_native hawaiian or other pacific islander` + `race_not allowed to collect` + `race_not reported` + `race_other` + `race_Unknown` + `race_white` + `iss_stage_I` + `iss_stage_II` + `iss_stage_III` + `iss_stage_Unknown` + `site_of_resection_or_biopsy_Abdomen, NOS` + `site_of_resection_or_biopsy_Blood` + `site_of_resection_or_biopsy_Bone marrow` + `site_of_resection_or_biopsy_Bones of skull and face and associated joints` + `site_of_resection_or_biopsy_Cheek mucosa` + `site_of_resection_or_biopsy_Connective, subcutaneous and other soft tissues of abdomen` + `site_of_resection_or_biopsy_Connective, subcutaneous and other soft tissues, NOS` + `site_of_resection_or_biopsy_Head, face or neck, NOS` + `site_of_resection_or_biopsy_Hematopoietic system, NOS` + `site_of_resection_or_biopsy_Intra-abdominal lymph nodes` + `site_of_resection_or_biopsy_Kidney, NOS` + `site_of_resection_or_biopsy_Lip, NOS` + `site_of_resection_or_biopsy_Liver` + `site_of_resection_or_biopsy_Lower gum` + `site_of_resection_or_biopsy_Lymph nodes of head, face and neck` + `site_of_resection_or_biopsy_Mandible` + `site_of_resection_or_biopsy_Mouth, NOS` + `site_of_resection_or_biopsy_Not Reported` + `site_of_resection_or_biopsy_Ovary` + `site_of_resection_or_biopsy_Pelvis, NOS` + `site_of_resection_or_biopsy_Peritoneum, NOS` + `site_of_resection_or_biopsy_Retroperitoneum` + `site_of_resection_or_biopsy_Small intestine, NOS` + `site_of_resection_or_biopsy_Specified parts of peritoneum` + `site_of_resection_or_biopsy_Spleen` + `site_of_resection_or_biopsy_Testis, NOS` + `site_of_resection_or_biopsy_Unknown` + `site_of_resection_or_biopsy_Vestibule of mouth` + `tissue_or_organ_of_origin_Bone marrow` + `tissue_or_organ_of_origin_Bones of skull and face and associated joints` + `tissue_or_organ_of_origin_Hematopoietic system, NOS` + `tissue_or_organ_of_origin_Orbit, NOS`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `site_of_resection_or_biopsy_Bones of skull and face and associated joints`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `race_asian`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `gender_unknown`,#`gender_not reported`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `gender_unknown`,#`gender_not reported`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `gender_unknown`,#`gender_not reported`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
nn <- neuralnet(vital_status_Alive ~ `site_of_resection_or_biopsy_Bones of skull and face and associated joints`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB` + `project_id_CGCI-BLGSP` + `project_id_GENIE-DFCI` + `project_id_GENIE-JHU` + `project_id_GENIE-MDA` + `project_id_GENIE-MSK` + `project_id_GENIE-UHN` + `project_id_GENIE-VICC` + `project_id_MMRF-COMMPASS` + `project_id_OHSU-CNL` + `project_id_TARGET-ALL-P1` + `project_id_TARGET-ALL-P2` + `project_id_TARGET-ALL-P3` + `project_id_TARGET-AML` + `project_id_TARGET-NBL` + `project_id_TCGA-LAML`,
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB` + `project_id_CGCI-BLGSP` + `project_id_GENIE-DFCI` + `project_id_GENIE-JHU` + `project_id_GENIE-MDA` + `project_id_GENIE-MSK` + `project_id_GENIE-UHN` + `project_id_GENIE-VICC` + `project_id_MMRF-COMMPASS` + `project_id_OHSU-CNL` + `project_id_TARGET-ALL-P1` + `project_id_TARGET-ALL-P2` + `project_id_TARGET-ALL-P3` + `project_id_TARGET-AML` + `project_id_TARGET-NBL` + `project_id_TCGA-LAML`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB` + `project_id_CGCI-BLGSP`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
project_id_BEATAML1.0-COHORT
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
names(train_nn_temp)[2]
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
names(train_nn_temp)[1]
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-CRENOLANIB`,
data=train_nn_temp,
hidden=c(100, 50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB`,
data=train_nn_temp,
hidden=c(50, 10),
linear.output=FALSE,
threshold=0.01)
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB`,
data=train_nn_temp,
hidden=c(50, 10),
linear.output=FALSE,
threshold=0.01)
library(neuralnet)
nn <- neuralnet(vital_status_Alive ~ `project_id_BEATAML1.0-COHORT` + `project_id_BEATAML1.0-CRENOLANIB`,
data=train_nn_temp,
hidden=c(50, 10),
linear.output=FALSE,
threshold=0.01)
